class Solution {
public:
    int obstaclepaths(int m, int n, vector<vector<int>>& ob ,int i, int j,vector<vector<int>>&dp)
    {
        if(i==m-1 && j==n-1)
           return ob[i][j]==0?1:0;
          
        int ans=0;
        if(i+1<=m-1)
            if(ob[i+1][j]==0 && ob[i][j]==0)
                dp[i+1][j]!=0?ans=ans+dp[i+1][j]:ans=ans+ obstaclepaths(m,n,ob,i+1,j,dp);

        if(j+1<=n-1)
            if(ob[i][j+1]==0 && ob[i][j]==0)
                dp[i][j+1]!=0?ans=ans+dp[i][j+1]:ans=ans+obstaclepaths(m,n,ob,i,j+1,dp);
            
        
        return dp[i][j] =ans;
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
       int m=obstacleGrid.size();
       int n=obstacleGrid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
        
  return obstaclepaths(m,n,obstacleGrid ,0 ,0,dp);
    }
}
